{
    "Andromeda Game Engine": {
        "collaborators": [
        ],
        "collaboratorHints": [
        ],
        "collaboratorLinks": [
        ],
        "highlighted": true,
        "thumbnailURL": "https://github.com/YanniSperon/OpenGL-Playground/blob/cfd05de03fdc07cde120421021fc6916d6699056/Demo/andromeda.png?raw=true",
        "relatedProjects": [
            "Dynama Physics Engine",
            "Iris GUI Framework",
            "Atlas Game Engine"
        ],
        "relatedProjectHints": [
            "The physics engine currently being created for integration with Andromeda.",
            "The GUI framework currently being created for integration with Andromeda.",
            "This engine's predecessor that shares almost no code."
        ],
        "Version 1": {
            "name": "Rendering Engine",
            "githubURL": "https://github.com/YanniSperon/OpenGL-Playground",
            "pictureURLs": [
                "https://github.com/YanniSperon/OpenGL-Playground/raw/refs/heads/master/Demo/andromedarendering.mp4"
            ],
            "pictureDescriptions": [
                "Demonstration of physically-based rendering (PBR), cube map reflections, multiple lights with custom colors, diffuse and specular sampling with a pre-filtered environment map and generation of the BRDF LUT."
            ],
            "description": "A self-taught learning endeavor built from the ground up in C++ and OpenGL, the Andromeda game engine expands upon its predecessor with advanced 3D rendering techniques and robust toolsets. Built with performance as a major consideration, it implements physically-based rendering (PBR), cube map reflections, multiple lights with custom colors, diffuse and specular sampling with a pre-filtered environment map and generation of the BRDF LUT. Future updates will integrate the Dynama physics engine and the Iris GUI framework, two separate projects currently in development.",
            "components": [
                "A self-taught learning endeavor developed entirely in C++ and OpenGL",
                "Andromeda is a custom game engine that builds on a previous version with significant improvements",
                "Features advanced 3D rendering techniques",
                "Includes a robust set of development tool sets",
                "Designed with performance as a core priority",
                "Implements physically-based rendering (PBR)",
                "Supports cube map reflections",
                "Handles multiple dynamic lights with custom color support",
                "Performs diffuse and specular sampling using a pre-filtered environment map",
                "Generates a BRDF lookup table (LUT) for accurate lighting",
                "Planned future updates include integration of the Dynama physics engine",
                "Future versions will also incorporate the Iris GUI framework",
                "Both Dynama and Iris are separate projects currently in active development"
            ],
            "projectStart": "2020-12-09",
            "projectEnd": "2021-07-14",
            "primaryLanguages": [
                "C++",
                "GLSL"
            ],
            "frameworks": [
                "OpenGL",
                "ImGui",
                "GLFW",
                "GLEW",
                "GLM"
            ],
            "frameworkHints": [
                "The core rendering/shading functionality.",
                "Basic 2D user interface rendering.",
                "Basic cross-platform window creation and deletion.",
                "Used to load OpenGL functions.",
                "Basic SIMD accelerated vector/matrix functionality."
            ],
            "tools": [
                "Visual Studio 2022",
                "Premake",
                "Git"
            ],
            "toolHints": [
                "The primary IDE used for application development in C++, including OpenGL and JUCE projects.",
                "The build system used to manage dependencies and generate project files for cross-platform development.",
                "The version control software used."
            ]
        },
        "Version 2": {
            "changes": "The scene editor frontend and node based backend functionality.",
            "name": "Scene Editor",
            "githubURL": "https://github.com/YanniSperon/Engine-GUI-Test",
            "pictureURLs": [
                "https://github.com/YanniSperon/Engine-GUI-Test/raw/refs/heads/master/Demo/sceneeditor.mp4"
            ],
            "pictureDescriptions": [
                "Demonstration of the node based hierarchy that allows inherited positions and any number of objects and lights with custom mesh importing."
            ],
            "description": "A self-taught learning endeavor built from the ground up in C++ and OpenGL, the Andromeda game engine expands upon its predecessor with advanced 3D rendering techniques and robust toolsets. Built with performance as a major consideration, it implements physically-based rendering (PBR), cube map reflections, multiple lights with custom colors, diffuse and specular sampling with a pre-filtered environment map and generation of the BRDF LUT. Future updates will integrate the Dynama physics engine and the Iris GUI framework, two separate projects currently in development.",
            "components": [
                "A self-taught learning endeavor developed entirely in C++ and OpenGL",
                "Andromeda is a custom game engine that builds on a previous version with significant improvements",
                "Features advanced 3D rendering techniques",
                "Includes a robust set of development tool sets",
                "Designed with performance as a core priority",
                "Implements physically-based rendering (PBR)",
                "Supports cube map reflections",
                "Handles multiple dynamic lights with custom color support",
                "Performs diffuse and specular sampling using a pre-filtered environment map",
                "Generates a BRDF lookup table (LUT) for accurate lighting",
                "Planned future updates include integration of the Dynama physics engine",
                "Future versions will also incorporate the Iris GUI framework",
                "Support for many texture formats and raw images",
                "Custom window icons",
                "Both Dynama and Iris are separate projects currently in active development"
            ],
            "projectStart": "2020-09-22",
            "projectEnd": "2021-01-22",
            "primaryLanguages": [
                "C++",
                "GLSL"
            ],
            "frameworks": [
                "OpenGL",
                "ImGui",
                "GLFW",
                "GLEW",
                "GLM"
            ],
            "frameworkHints": [
                "The core rendering/shading functionality.",
                "Basic 2D user interface rendering.",
                "Basic cross-platform window creation and deletion.",
                "Used to load OpenGL functions.",
                "Basic SIMD accelerated vector/matrix functionality."
            ],
            "tools": [
                "Visual Studio 2022",
                "Premake",
                "Git"
            ],
            "toolHints": [
                "The primary IDE used for application development in C++, including OpenGL and JUCE projects.",
                "The build system used to manage dependencies and generate project files for cross-platform development.",
                "The version control software used."
            ]
        },
        "Version 3": {
            "changes": "Simple landscape generation using libnoise to later be integrated into the main Andromeda engine.",
            "name": "Landscape Generation",
            "githubURL": "https://github.com/YanniSperon/ProceduralGeneration",
            "pictureURLs": [
                "https://github.com/YanniSperon/ProceduralGeneration/raw/refs/heads/master/Demo/white.mp4",
                "https://github.com/YanniSperon/ProceduralGeneration/raw/refs/heads/master/Demo/normal.mp4"
            ],
            "pictureDescriptions": [
                "Populating 263,169 vertices with noise based on X and Z position. Cycling through frequency changes.",
                "Shading with the world-space normals. Populating 263,169 vertices with noise based on X and Z position. Cycling through frequency changes."
            ],
            "description": "A self-taught learning endeavor built from the ground up in C++ and OpenGL, the Andromeda game engine expands upon its predecessor with advanced 3D rendering techniques and robust toolsets. Built with performance as a major consideration, it implements physically-based rendering (PBR), cube map reflections, multiple lights with custom colors, diffuse and specular sampling with a pre-filtered environment map and generation of the BRDF LUT. Future updates will integrate the Dynama physics engine and the Iris GUI framework, two separate projects currently in development.",
            "components": [
                "A self-taught learning endeavor developed entirely in C++ and OpenGL",
                "Andromeda is a custom game engine that builds on a previous version with significant improvements",
                "Features advanced 3D rendering techniques",
                "Includes a robust set of development tool sets",
                "Designed with performance as a core priority",
                "Implements physically-based rendering (PBR)",
                "Supports cube map reflections",
                "Handles multiple dynamic lights with custom color support",
                "Performs diffuse and specular sampling using a pre-filtered environment map",
                "Generates a BRDF lookup table (LUT) for accurate lighting",
                "Planned future updates include integration of the Dynama physics engine",
                "Future versions will also incorporate the Iris GUI framework",
                "Both Dynama and Iris are separate projects currently in active development",
                "Landscape generation through libnoise"
            ],
            "projectStart": "2023-03-21",
            "projectEnd": "2023-05-11",
            "primaryLanguages": [
                "C++",
                "GLSL"
            ],
            "frameworks": [
                "OpenGL",
                "GLFW",
                "GLEW",
                "libnoise"
            ],
            "frameworkHints": [
                "The core rendering/shading functionality.",
                "Basic cross-platform window creation and deletion.",
                "Used to load OpenGL functions.",
                "Used to generate Perlin noise."
            ],
            "tools": [
                "Visual Studio 2022",
                "Premake",
                "Git"
            ],
            "toolHints": [
                "The primary IDE used for application development in C++, including OpenGL and JUCE projects.",
                "The build system used to manage dependencies and generate project files for cross-platform development.",
                "The version control software used."
            ]
        },
        "Version 4": {
            "changes": "The window management backend of of Andromeda engine.",
            "name": "Window Management",
            "githubURL": "https://github.com/YanniSperon/AndromedaV2",
            "pictureURLs": [
                "https://github.com/YanniSperon/AndromedaV2/raw/refs/heads/master/Demo/windowmanagement.mp4"
            ],
            "pictureDescriptions": [
                "Demonstration of creating multiple windows, each with different OpenGL contexts."
            ],
            "description": "A self-taught learning endeavor built from the ground up in C++ and OpenGL, the Andromeda game engine expands upon its predecessor with advanced 3D rendering techniques and robust toolsets. Built with performance as a major consideration, it implements physically-based rendering (PBR), cube map reflections, multiple lights with custom colors, diffuse and specular sampling with a pre-filtered environment map and generation of the BRDF LUT. Future updates will integrate the Dynama physics engine and the Iris GUI framework, two separate projects currently in development.",
            "components": [
                "A self-taught learning endeavor developed entirely in C++ and OpenGL",
                "Andromeda is a custom game engine that builds on a previous version with significant improvements",
                "Features advanced 3D rendering techniques",
                "Includes a robust set of development tool sets",
                "Designed with performance as a core priority",
                "Implements physically-based rendering (PBR)",
                "Supports cube map reflections",
                "Handles multiple dynamic lights with custom color support",
                "Performs diffuse and specular sampling using a pre-filtered environment map",
                "Generates a BRDF lookup table (LUT) for accurate lighting",
                "Planned future updates include integration of the Dynama physics engine",
                "Future versions will also incorporate the Iris GUI framework",
                "Both Dynama and Iris are separate projects currently in active development"
            ],
            "projectStart": "2021-01-18",
            "projectEnd": "2023-03-07",
            "primaryLanguages": [
                "C++"
            ],
            "frameworks": [
                "OpenGL",
                "GLFW",
                "GLEW"
            ],
            "frameworkHints": [
                "The core rendering/shading functionality.",
                "Basic cross-platform window creation and deletion.",
                "Used to load OpenGL functions."
            ],
            "tools": [
                "Visual Studio 2022",
                "Premake",
                "Git"
            ],
            "toolHints": [
                "The primary IDE used for application development in C++, including OpenGL and JUCE projects.",
                "The build system used to manage dependencies and generate project files for cross-platform development.",
                "The version control software used."
            ]
        }
    },
    "Atlas Game Engine": {
        "collaborators": [
        ],
        "collaboratorHints": [
        ],
        "collaboratorLinks": [
        ],
        "highlighted": true,
        "thumbnailURL": "https://raw.githubusercontent.com/YanniSperon/Legacy-Atlas-Engine/refs/heads/master/OpenGL/res/images/textures/newcow.png",
        "relatedProjects": [
            "Fractyne"
        ],
        "relatedProjectHints": [
            "A standalone shader tool that is utilizing the knowledge I gained from this project."
        ],
        "Version 1": {
            "githubURL": "https://github.com/YanniSperon/Legacy-Atlas-Engine",
            "pictureURLs": [
                "https://github.com/YanniSperon/Legacy-Atlas-Engine/raw/1fdc8991a623e2e3b25623dc21a9d8ed5e630b7e/Demonstrations/Animated.mp4",
                "https://github.com/YanniSperon/Legacy-Atlas-Engine/raw/refs/heads/master/Demonstrations/Physics.mp4"
            ],
            "pictureDescriptions": [
                "A demonstration of the complex model and texture loading as well as the animations.",
                "A demonstration of the scene editor as well as the physics simulation."
            ],
            "description": "This project was a self-directed learning experience in C++ and OpenGL. The primary goal was to build a functional 3D rendering engine while gaining hands-on experience with graphics programming. The project served as a foundational step in understanding graphics programming and game engine development, completed within the self-imposed deadline of two months.",
            "components": [
                "Blinn-Phong lighting model implemented for rudimentary realistic shading.",
                "Bullet physics integration for dynamic object interactions and 3D environment simulation.",
                "A custom scene editor designed for quick and easy methods to create, manipulate, and save 3D scenes.",
                "Multithreaded 3D model loader for efficient scene loading and rendering.",
                "Post-processing shader effects for bloom and other filtering effects.",
                "Basic animation capabilities."
            ],
            "projectStart": "2019-10-10",
            "projectEnd": "2019-12-06",
            "primaryLanguages": [
                "C++",
                "GLSL"
            ],
            "frameworks": [
                "OpenGL",
                "ImGui",
                "GLFW",
                "GLEW",
                "GLM",
                "FreeType"
            ],
            "frameworkHints": [
                "The core rendering/shading functionality.",
                "Basic 2D user interface rendering.",
                "Basic cross-platform window creation and deletion.",
                "Used to load OpenGL functions.",
                "Basic SIMD accelerated vector/matrix functionality.",
                "Used to implement custom TrueType font rendering."
            ],
            "tools": [
                "Visual Studio 2022",
                "Premake",
                "Git"
            ],
            "toolHints": [
                "The primary IDE used for application development in C++, including OpenGL and JUCE projects.",
                "The build system used to manage dependencies and generate project files for cross-platform development.",
                "The version control software used."
            ]
        }
    },
    "Dynama Physics Engine": {
        "collaborators": [
        ],
        "collaboratorHints": [
        ],
        "collaboratorLinks": [
        ],
        "highlighted": true,
        "thumbnailURL": "./dynama.png",
        "relatedProjects": [
            "Andromeda Game Engine",
            "Iris GUI Framework"
        ],
        "relatedProjectHints": [
            "The game engine that Dynama will be integrated with eventually.",
            "The framework that is being developed alongside Dynama to also be integrated into Andromeda."
        ],
        "Version 1": {
            "changes": "",
            "githubURL": "https://github.com/YanniSperon/Algorithms",
            "pictureURLs": [
                "./basic.mp4"
            ],
            "pictureDescriptions": [
                "A demonstration of the Jarvis March and Monotone Chain algorithms in 2D."
            ],
            "description": "Currently a work in progress. A high-performance physics module originally developed for Andromeda Game Engine. It features broad-phase collision detection via AABB and spherical bounding volumes organized in an octree, followed by precise narrow-phase checks. It supports both rigid and soft body simulations, leveraging SIMD accelerations where applicable to ensure optimal real-time performance in complex scenes.",
            "components": [
                "Broad phase collision detection",
                "Octree comprised of axis-aligned bounding boxes and spherical bounding volumes",
                "Narrow-phase collision detection",
                "Collision resolution (Incomplete)",
                "Rigid body simulations (Incomplete)",
                "Soft body simulations (Incomplete)"
            ],
            "projectStart": "2025-01-08",
            "projectEnd": "Now",
            "primaryLanguages": [
                "C++",
                "GLSL"
            ],
            "frameworks": [
                "OpenGL",
                "GLAD",
                "GLFW",
                "ImGui"
            ],
            "frameworkHints": [
                "The core rendering/shading functionality to view simulations and make sure they are functional.",
                "Used to load OpenGL functions.",
                "Used to create and manage windows.",
                "Basic debug GUI display."
            ],
            "tools": [
                "Visual Studio 2022",
                "CMake",
                "Git"
            ],
            "toolHints": [
                "The primary IDE used for application development in C++, including OpenGL and JUCE projects.",
                "The build system used to manage dependencies and generate project files for cross-platform development.",
                "The version control software used."
            ]
        }
    },
    "Iris GUI Framework": {
        "collaborators": [
        ],
        "collaboratorHints": [
        ],
        "collaboratorLinks": [
        ],
        "highlighted": true,
        "thumbnailURL": "./iris.png",
        "relatedProjects": [
            "Andromeda Game Engine",
            "Dynama Physics Engine"
        ],
        "relatedProjectHints": [
            "The game engine that Dynama will be integrated with eventually.",
            "The physics engine that is being developed alongside Dynama to also be integrated into Andromeda."
        ],
        "Version 1": {
            "changes": "",
            "githubURL": "https://github.com/YanniSperon/GUI",
            "pictureURLs": [
                "https://github.com/YanniSperon/GUI/raw/refs/heads/master/Demo/buttonclicking.mp4",
                "https://github.com/YanniSperon/GUI/raw/refs/heads/master/Demo/textwrapping.mp4"
            ],
            "pictureDescriptions": [
                "Stylized button with outline, an inner text element, and some stylized (border, radius, color) elements on the rest of the screen. All sized and placed with custom layout system.",
                "Stylized container elements for layouts with an inner text element that word wraps dynamically as the text size increases."
            ],
            "description": "Currently a work in progress, but has not been worked on in a while. A modular GUI framework designed for real-time applications with static rendering, featuring a node-based layer system. It supports modifiable constraints, event propagation, and a flexible hierarchy. Current components include an empty view, image view, text view, and a button view with event callbacks. The text system uses FreeType to render glyphs, and supports cached fonts, DPI scaling, text rendering, and font atlases. Iris also supports gestures and currently runs on OpenGL.",
            "components": [
                "A modular GUI framework",
                "Static rendering, recalculated only on updates.",
                "Node-based layer system.",
                "Element styling (borders, colors, ",
                "Modifiable constraints, event propagation, and a flexible hierarchy.",
                "Current components include an empty view (custom background/spacing), image view, text view, and a button view with event callbacks.",
                "FreeType glyph rendering",
                "Supports cached fonts, DPI scaling, text rendering, and font atlases.",
                "Supports gestures."
            ],
            "projectStart": "2020-12-07",
            "projectEnd": "2020-07-18",
            "primaryLanguages": [
                "C++",
                "GLSL"
            ],
            "frameworks": [
                "OpenGL",
                "GLEW",
                "GLFW",
                "GLM"
            ],
            "frameworkHints": [
                "The core rendering/shading functionality to view simulations and make sure they are functional.",
                "Used to load OpenGL functions.",
                "Used to create and manage windows.",
                "SIMD accelerated linear algebra library."
            ],
            "tools": [
                "Visual Studio 2022",
                "CMake",
                "Git"
            ],
            "toolHints": [
                "The primary IDE used for application development in C++, including OpenGL and JUCE projects.",
                "The build system used to manage dependencies and generate project files for cross-platform development.",
                "The version control software used."
            ]
        }
    },
    "Zeus Quantitative Analysis Engine": {
        "collaborators": [
        ],
        "collaboratorHints": [
        ],
        "collaboratorLinks": [
        ],
        "highlighted": true,
        "thumbnailURL": "./zeus.png",
        "relatedProjects": [
        ],
        "relatedProjectHints": [
        ],
        "Version 1": {
            "changes": "",
            "githubURL": "",
            "pictureURLs": [],
            "pictureDescriptions": [],
            "description": "Started to self-teach the world of Quantitative Finance specifically pertaining to high-frequency trading. Aiming to be a high-performance C++ framework designed for building, testing, and analyzing quantitative trading strategies. It should combine a modular back-tester, a fast Monte Carlo option pricer with Greek and volatility surface support, and a realistic exchange simulator with a fully functional limit order book. It should be built for speed and extensibility, and should provide the infrastructure to explore the full lifecycle of modern quantitative trading.",
            "components": [],
            "projectStart": "2025-03-20",
            "projectEnd": "Now",
            "primaryLanguages": [
                "C++"
            ],
            "frameworks": [
                "ImGui"
            ],
            "frameworkHints": [
                "User interface functionality."
            ],
            "tools": [
                "Visual Studio 2022",
                "CMake",
                "Git"
            ],
            "toolHints": [
                "The primary IDE used for application development in C++.",
                "The build system used to manage dependencies and generate project files for cross-platform development.",
                "The version control software used."
            ]
        }
    },
    "Fractyne": {
        "collaborators": [
        ],
        "collaboratorHints": [
        ],
        "collaboratorLinks": [
        ],
        "highlighted": true,
        "thumbnailURL": "./fractyne.png",
        "relatedProjects": [
            "Atlas Game Engine"
        ],
        "relatedProjectHints": [
            "A game engine that was written from scratch and along the way I learned the shader functionality employed in this project."
        ],
        "Version 1": {
            "changes": "",
            "githubURL": "",
            "pictureURLs": [],
            "pictureDescriptions": [],
            "description": "A standalone shader tool application currently a work in progress.",
            "components": [],
            "projectStart": "2025-02-24",
            "projectEnd": "Now",
            "primaryLanguages": [
                "C++",
                "GLSL"
            ],
            "frameworks": [
                "OpenGL",
                "GLAD",
                "JUCE",
                "GLM"
            ],
            "frameworkHints": [
                "The core rendering/shading functionality.",
                "Used to load OpenGL functions.",
                "The core user interface and audio processing functionality.",
                "Basic optimized mathematics functionality."
            ],
            "tools": [
                "Visual Studio 2022",
                "CMake",
                "Git"
            ],
            "toolHints": [
                "The primary IDE used for application development in C++, including OpenGL and JUCE projects.",
                "The build system used to manage dependencies and generate project files for cross-platform development.",
                "The version control software used."
            ]
        }
    },
    "Networked Battleship": {
        "collaborators": [
        ],
        "collaboratorHints": [
        ],
        "collaboratorLinks": [
        ],
        "highlighted": true,
        "thumbnailURL": "https://github.com/YanniSperon/Battleship/assets/47045424/2bf7a7ee-1046-4bc4-b086-18817a9aad52",
        "relatedProjects": [
            "Group Messenger"
        ],
        "relatedProjectHints": [
            "Networking server and client code used as a jumping off point and greatly changed."
        ],
        "Version 1": {
            "name": "Original Game",
            "changes": "",
            "githubURL": "https://github.com/YanniSperon/Battleship",
            "pictureURLs": [
                "https://github.com/YanniSperon/Battleship/assets/47045424/2bf7a7ee-1046-4bc4-b086-18817a9aad52",
                "https://github.com/YanniSperon/Battleship/assets/47045424/6d13018b-9b44-46ef-af79-72f10900b41e",
                "https://github.com/YanniSperon/Battleship/assets/47045424/6c1fcaf1-e2a5-49e7-b649-dfd9eb3e9d66",
                "https://github.com/YanniSperon/Battleship/assets/47045424/b5d2101b-803c-4eec-9c79-aaef983abf09",
                "https://github.com/YanniSperon/Battleship/assets/47045424/0c598dd5-1b9d-4cc7-b6fc-a626c7a46fa7",
                "https://github.com/YanniSperon/Battleship/assets/47045424/bcc56b1b-46df-4d61-82da-67f32f3e5379",
                "https://github.com/YanniSperon/Battleship/assets/47045424/43344698-ba0e-430c-8064-c3689b79dc79",
                "https://github.com/YanniSperon/Battleship/assets/47045424/d9aa4640-156d-45a9-b2c6-f75c91bcbb28",
                "https://github.com/YanniSperon/Battleship/assets/47045424/f1d5fc6e-d78f-4d0b-87dd-1773c0b1823b",
                "https://github.com/YanniSperon/Battleship/assets/47045424/5153d718-5331-4fb1-b402-cca55d8d2f68"
            ],
            "pictureDescriptions": [
                "The main menu of the game.",
                "Searching for a game on the main menu.",
                "The game board during the ship placing phase.",
                "The game board while waiting for the opponent to finish placing their ships.",
                "The game board during the opponent's turn.",
                "The camera rotating around the game board to demonstrate 3D capabilities.",
                "The game board during the player's turn after many turns.",
                "The defeat screen after losing a game.",
                "The victory screen after winning a game.",
                "The main menu after gaining experience points and being halfway to a level-up."
            ],
            "description": "A networked 3D Battleship server and client written in Java using JavaFX utilizing Java sockets. Features a public game finder, as well as the ability to play against an algorithm.",
            "components": [
                "A custom entity-component-system written on top of JavaFX's very limited 3D capabilities.",
                "A custom mesh, material, and texture loader.",
                "A custom OBJ animation loader.",
                "A fully featured 3D camera system with zoom, pan, and rotate capabilities.",
                "A game settings menu with volume sliders.",
                "Ray-based selection and collision detection for selecting 3D objects.",
                "Fully replicated networking with multithreading and raw Java sockets.",
                "Online networked matchmaking with a public game finder.",
                "An AI algorithm to play against.",
                "Fully custom designed art, 3D models, and textures.",
                "Professional music and sound effects.",
                "A level-up system based on games won.",
                "An aesthetically pleasing victory and defeat screen accompanied with fitting music."
            ],
            "incompleteComponents": [
                "Modern graphics and shading",
                "A game chat and replay system.",
                "A private game system.",
                "A friends system.",
                "A ranked system.",
                "A game statistics system."
            ],
            "projectStart": "2024-04-24",
            "projectEnd": "2024-05-07",
            "primaryLanguages": [
                "Java",
                "FXML",
                "CSS"
            ],
            "frameworks": [
                "JavaFX",
                "JavaFX Media",
                "JavaFX 3D API",
                "Java Networking API"
            ],
            "frameworkHints": [
                "The core functionality of the 2D user interface and FXML functionality.",
                "The core audio functionality for background music (MediaPlayer) and sound effects (AudioClip).",
                "The core functionality of extremely basic 3D rendering, capable of rendering primitive shapes with per-vertex Phong shading.",
                "The core networking features for sending and receiving basic messages over raw Java Sockets."
            ],
            "tools": [
                "IntelliJ IDEA",
                "Blender",
                "Adobe Photoshop",
                "Maven",
                "Git"
            ],
            "toolHints": [
                "The primary IDE used for development.",
                "The primary 3D modeling software used for creating 3D models.",
                "The primary image editing software used for creating textures and GUI elements.",
                "The primary build automation tool used for managing dependencies and building the project.",
                "The version control software used."
            ],
            "relatedProjects": [
                "Group Messenger",
                "Body Tattoo Battleship"
            ],
            "relatedProjectHints": [
                "Networking server and client code used as a jumping off point and greatly changed.",
                "Entire project forked into a new repository and modified to support no mouse controls. Created for a wearable technology demo demonstrating the usability of a capacitive touch sensor based body-tattoo."
            ]
        },
        "Version 2": {
            "name": "Body Tattoo Integration",
            "changes": "Changed controls and added a translation layer to allow a unique input device. Meant to demonstrate the potential capabilities of capacitive body tattoos",
            "githubURL": "https://github.com/YanniSperon/BodyTattooBattleship",
            "pictureURLs": [
                "https://github.com/user-attachments/assets/7698b740-53c0-4d67-a13e-659eb35da2a4",
                "https://github.com/YanniSperon/Battleship/assets/47045424/2bf7a7ee-1046-4bc4-b086-18817a9aad52",
                "https://github.com/YanniSperon/Battleship/assets/47045424/6d13018b-9b44-46ef-af79-72f10900b41e",
                "https://github.com/YanniSperon/Battleship/assets/47045424/6c1fcaf1-e2a5-49e7-b649-dfd9eb3e9d66",
                "https://github.com/YanniSperon/Battleship/assets/47045424/b5d2101b-803c-4eec-9c79-aaef983abf09",
                "https://github.com/YanniSperon/Battleship/assets/47045424/0c598dd5-1b9d-4cc7-b6fc-a626c7a46fa7",
                "https://github.com/YanniSperon/Battleship/assets/47045424/bcc56b1b-46df-4d61-82da-67f32f3e5379",
                "https://github.com/YanniSperon/Battleship/assets/47045424/43344698-ba0e-430c-8064-c3689b79dc79",
                "https://github.com/YanniSperon/Battleship/assets/47045424/d9aa4640-156d-45a9-b2c6-f75c91bcbb28",
                "https://github.com/YanniSperon/Battleship/assets/47045424/f1d5fc6e-d78f-4d0b-87dd-1773c0b1823b",
                "https://github.com/YanniSperon/Battleship/assets/47045424/5153d718-5331-4fb1-b402-cca55d8d2f68"
            ],
            "pictureDescriptions": [
                "An example of where the device prototype could go for example.",
                "The main menu of the game.",
                "Searching for a game on the main menu.",
                "The game board during the ship placing phase.",
                "The game board while waiting for the opponent to finish placing their ships.",
                "The game board during the opponent's turn.",
                "The camera rotating around the game board to demonstrate 3D capabilities.",
                "The game board during the player's turn after many turns.",
                "The defeat screen after losing a game.",
                "The victory screen after winning a game.",
                "The main menu after gaining experience points and being halfway to a level-up."
            ],
            "description": "A networked 3D Battleship server and client written in Java using JavaFX utilizing Java sockets. Features a public game finder, as well as the ability to play against an algorithm. Implements a wearable technology demo using a capacitive touch sensor based body-tattoo.",
            "components": [
                "A custom entity-component-system written on top of JavaFX's very limited 3D capabilities.",
                "A custom mesh, material, and texture loader.",
                "A custom OBJ animation loader.",
                "Integrates with Processing to read capacitive touch sensor data from Arduino, dispatch it to the Battleship client, and send messages to the server.",
                "A fully featured 3D camera system with zoom, pan, and rotate capabilities.",
                "A game settings menu with volume sliders.",
                "Ray-based selection and collision detection for selecting 3D objects.",
                "Fully replicated networking with multithreading and raw Java sockets.",
                "Online networked matchmaking with a public game finder.",
                "An AI algorithm to play against.",
                "Fully custom designed art, 3D models, and textures.",
                "Professional music and sound effects.",
                "A level-up system based on games won.",
                "An aesthetically pleasing victory and defeat screen accompanied with fitting music.",
                "A unique input device to demonstrate the potential capabilities of capacitive body tattoos"
            ],
            "incompleteComponents": [
                "Modern graphics and shading",
                "A game chat and replay system.",
                "A private game system.",
                "A friends system.",
                "A ranked system.",
                "A game statistics system."
            ],
            "projectStart": "2024-10-24",
            "projectEnd": "2024-10-30",
            "primaryLanguages": [
                "Java",
                "FXML",
                "CSS"
            ],
            "frameworks": [
                "JavaFX",
                "JavaFX Media",
                "JavaFX 3D API",
                "Java Networking API",
                "Processing"
            ],
            "frameworkHints": [
                "The core functionality of the 2D user interface and FXML functionality.",
                "The core audio functionality for background music (MediaPlayer) and sound effects (AudioClip).",
                "The core functionality of extremely basic 3D rendering, capable of rendering primitive shapes with per-vertex Phong shading.",
                "The core networking features for sending and receiving basic messages over raw Java Sockets.",
                "The framework that is used to read capacitive touch sensor data from an Arduino and dispatch it to the Battleship client."
            ],
            "tools": [
                "IntelliJ IDEA",
                "Blender",
                "Adobe Photoshop",
                "Maven",
                "Processing IDE",
                "Git"
            ],
            "toolHints": [
                "The primary IDE used for development.",
                "The primary 3D modeling software used for creating 3D models.",
                "The primary image editing software used for creating textures and GUI elements.",
                "The primary build automation tool used for managing dependencies and building the project.",
                "The IDE used to develop the Processing sketch that reads capacitive touch sensor data from an Arduino and dispatches it to the Battleship client.",
                "The version control software used."
            ]
        }
    },
    "Space Science Game": {
        "collaborators": [
            "Volemyu"
        ],
        "collaboratorHints": [
            "Developed custom title screen music and helped with audio pre-processing."
        ],
        "collaboratorLinks": [
            "https://linktr.ee/volemyu"
        ],
        "highlighted": true,
        "thumbnailURL": "https://raw.githubusercontent.com/YanniSperon/Space-Science-Project/f1ad2fcda4cfd98bca3387ae93a178b565b928ed/Media/icon.jpg",
        "relatedProjects": [
            "Atlas Game Engine"
        ],
        "relatedProjectHints": [
            "Developed around the same time, using similar skills."
        ],
        "Version 1": {
            "githubURL": "https://github.com/YanniSperon/Space-Science-Project",
            "pictureURLs": [
                "https://github.com/YanniSperon/Space-Science-Project/blob/f1ad2fcda4cfd98bca3387ae93a178b565b928ed/Media/demo.mp4?raw=true"
            ],
            "pictureDescriptions": [
                "A demonstration of the game. This was played during a verbal in-class presentation."
            ],
            "description": "This project was a self-directed learning experience in C++ and OpenGL. Developed in one week, with a very small amount of start code borrowed from the original Atlas Engine. The primary goal was to make an engaging visual to accompany a verbal presentation in a space science course.",
            "components": [
                "Hand-written 2D SAT collision detection.",
                "Custom texture atlas based 2D animation.",
                "A custom glyph font atlas generator and renderer",
                "Quick unique games to provide an interesting visual during presentation."
            ],
            "projectStart": "2019-11-15",
            "projectEnd": "2019-11-22",
            "primaryLanguages": [
                "C++",
                "GLSL"
            ],
            "frameworks": [
                "OpenGL",
                "GLFW",
                "GLEW",
                "irrKlang",
                "GLM"
            ],
            "frameworkHints": [
                "The core rendering/shading functionality.",
                "Basic cross platform window creation and management",
                "Used to load OpenGL functions.",
                "Used to load and play 2D audio.",
                "Basic SIMD accelerated vector/matrix functionality."
            ],
            "tools": [
                "Visual Studio 2022",
                "Git"
            ],
            "toolHints": [
                "The primary IDE used for application development in C++.",
                "The version control software used."
            ]
        }
    },
    "Professional Website Portfolio": {
        "collaborators": [
        ],
        "collaboratorHints": [
        ],
        "collaboratorLinks": [
        ],
        "highlighted": false,
        "thumbnailURL": "https://github.com/user-attachments/assets/bfb49a1c-dd65-4f8d-b7c5-a75af10453d9",
        "relatedProjects": [],
        "relatedProjectHints": [],
        "Version 1": {
            "changes": "",
            "githubURL": "https://github.com/YanniSperon/Website",
            "pictureURLs": [],
            "pictureDescriptions": [],
            "description": "A hand-written professional website portfolio made in React",
            "components": [
                "React frontend",
                "Responsive",
                "Mobile friendly",
                "Google Analytics 4 integration",
                "Supports dark mode and light mode"
            ],
            "projectStart": "2025-03-05",
            "projectEnd": "2025-03-10",
            "primaryLanguages": [
                "JavaScript",
                "JSX",
                "HTML",
                "CSS"
            ],
            "frameworks": [
                "React",
                "React Router",
                "React Google Analytics 4",
                "Apollo Client"
            ],
            "frameworkHints": [
                "The core of the web page.",
                "Simplifying some features like switching pages.",
                "Allows measurement of metrics",
                "Planned GraphQL integration with GitHub and LinkedIn (not implemented yet)."
            ],
            "tools": [
                "Visual Studio Code",
                "NPM",
                "Git"
            ],
            "toolHints": [
                "The primary IDE used for development.",
                "The primary build automation tool used for managing dependencies and building the project.",
                "The version control software used."
            ]
        }
    },
    "Smart Bike Helmet": {
        "collaborators": [
        ],
        "collaboratorHints": [
        ],
        "collaboratorLinks": [
        ],
        "highlighted": false,
        "thumbnailURL": "https://github.com/user-attachments/assets/a92e75af-dde9-40c6-9b60-426cdb0552a9",
        "relatedProjects": [],
        "relatedProjectHints": [],
        "Version 1": {
            "changes": "",
            "githubURL": "https://github.com/YanniSperon/MessagingApp",
            "pictureURLs": [
                "https://github.com/user-attachments/assets/a92e75af-dde9-40c6-9b60-426cdb0552a9",
                "https://github.com/user-attachments/assets/d2246dee-c9dd-432f-9d29-4b6bf3668ff6",
                "https://github.com/user-attachments/assets/f8c8e5cc-2af8-46a0-9595-9450054b1b91",
                "https://github.com/user-attachments/assets/121f16d2-9310-47fd-874c-8d7574b2d931",
                "https://github.com/user-attachments/assets/9343b888-01a7-471d-a462-3c02a345d5db",
                "https://github.com/user-attachments/assets/232cb0a8-8227-4c8a-a467-6a37bd2df9d8",
                "https://github.com/user-attachments/assets/87baa803-009a-4911-bde0-78982a22b7e5",
                "https://github.com/user-attachments/assets/21347ced-aa1c-42ec-b6c9-84b7137c3fdd"
            ],
            "pictureDescriptions": [
                "The prototype helmet prior to bundling of the electronics.",
                "The back of the prototype helmet prior to bundling of the electronics.",
                "The prototype optional glove mounted electronic component.",
                "The wiring of the helmet Arduino/sensors and the glove Arduino/sensors.",
                "A mock up of the planned user interface showing blinking of a turn signal.",
                "A mock up of the planned user interface with a crash notification based on gyroscopic sensors.",
                "A mock up of the screen when \"Yes\" is selected in the previous page.",
                "A mock up of the settings screen to disable SOS (crash) notifications."
            ],
            "description": "This prototype smart helmet system adds turn signals to a bike helmet, controllable via hand gestures (with an optional glove) or helmet motion (via an accelerometer). It is designed to work alongside an iOS app for additional functionality.",
            "components": [
                "Arduino-based system controlling turn signals via motion and gesture inputs.",
                "Glove component with sensors to detect hand gestures for signal activation.",
                "Helmet accelerometer to detect head movements for automated signal control.",
                "iOS app built with SceneKit, UIKit, and Swift for expanded functionality.",
                "All hardware and software were developed and wired by Yanni Speron."
            ],
            "projectStart": "2024-11-21",
            "projectEnd": "2024-12-05",
            "primaryLanguages": [
                "C++",
                "Swift"
            ],
            "frameworks": [
                "Core Bluetooth",
                "SceneKit",
                "UIKit"
            ],
            "frameworkHints": [
                "The core functionality of the 2D user interface.",
                "The core networking features for sending and receiving basic messages over raw Java Sockets."
            ],
            "tools": [
                "Arduino IDE",
                "XCode",
                "Git"
            ],
            "toolHints": [
                "The primary IDE used for the microcontroller development, used ot manage dependencies and build the project.",
                "The primary IDE used for the iOS development, used to manage dependencies and build the project.",
                "The version control software used."
            ]
        }
    },
    "Group Messenger": {
        "collaborators": [
        ],
        "collaboratorHints": [
        ],
        "collaboratorLinks": [
        ],
        "highlighted": false,
        "thumbnailURL": "https://github.com/user-attachments/assets/3ac8cd5f-3089-4eb9-86d6-1ab2fef9e3ec",
        "relatedProjects": [
            "Networked Battleship"
        ],
        "relatedProjectHints": [
            "A networked Battleship client and server that built upon the networking code written for this application."
        ],
        "Version 1": {
            "changes": "",
            "githubURL": "https://github.com/YanniSperon/MessagingApp",
            "pictureURLs": [
                "https://github.com/user-attachments/assets/62518e96-b1ff-4cae-8fb4-6514d87ef108",
                "https://github.com/user-attachments/assets/e8705bda-7353-464a-bd1f-e81638977af8",
                "https://github.com/user-attachments/assets/3ac8cd5f-3089-4eb9-86d6-1ab2fef9e3ec",
                "https://github.com/user-attachments/assets/7dde3732-a61b-4ddb-83b2-6f9cda6e1906",
                "https://github.com/user-attachments/assets/bd161ec2-7074-4426-8251-616737a8e4e7",
                "https://github.com/user-attachments/assets/f3f9ee7d-d533-4c9a-b7b4-54048b635b61",
                "https://github.com/user-attachments/assets/c123cbee-f359-48a7-a4c6-7b74cafb2166",
                "https://github.com/user-attachments/assets/60f6e663-591a-4633-8d39-ba3f76667ba3",
                "https://github.com/user-attachments/assets/fa379a9c-3f4d-403b-bf0d-d9328dba7b21",
                "https://github.com/user-attachments/assets/d0e5431d-b2e3-457f-b492-ae9ec6317b61",
                "https://github.com/user-attachments/assets/e9462c56-c90a-4fb4-9693-933c8ea1d1d9",
                "https://github.com/user-attachments/assets/986922e7-9688-4e5c-b9ff-9d76af6a76c5",
                "https://github.com/user-attachments/assets/f1b96532-dcae-4c55-815a-5dc7004ec280",
                "https://github.com/user-attachments/assets/b40ccf3c-c4a5-47bf-bc8a-314f67b66244"
            ],
            "pictureDescriptions": [
                "The login screen of the desktop application.",
                "The global chat.",
                "Creating a public group.",
                "The newly created public group displayed in the group list.",
                "Another user viewing and messaging in the new public group.",
                "A direct message between two users as viewed by Bob.",
                "A direct message between two users as viewed by Jim.",
                "Creating a private group.",
                "The new private group as viewed by Jim.",
                "The new private group as viewed by Bob.",
                "The inaccessible private group as viewed by Darren.",
                "The groups and log as viewed from the server user interface.",
                "The DM between Jim and Bob as viewed from the server user interface.",
                "The private group as viewed from the server user interface."
            ],
            "description": "An online chat messaging application client and server client written in Java using JavaFX utilizing Java sockets.",
            "components": [
                "A custom entity-component-system written on top of JavaFX's very limited 3D capabilities.",
                "A custom mesh, material, and texture loader.",
                "A custom OBJ animation loader.",
                "Fully replicated networking with multithreading and raw Java sockets.",
                "Fully custom designed art, 3D models, and textures.",
                "Professional music and sound effects.",
                "A level-up system based on games won.",
                "An aesthetically pleasing victory and defeat screen accompanied with fitting music."
            ],
            "projectStart": "2024-04-18",
            "projectEnd": "2024-04-20",
            "primaryLanguages": [
                "Java"
            ],
            "frameworks": [
                "JavaFX",
                "Java Networking API"
            ],
            "frameworkHints": [
                "The core functionality of the 2D user interface.",
                "The core networking features for sending and receiving basic messages over raw Java Sockets."
            ],
            "tools": [
                "IntelliJ IDEA",
                "Maven",
                "Git"
            ],
            "toolHints": [
                "The primary IDE used for development.",
                "The primary build automation tool used for managing dependencies and building the project.",
                "The version control software used."
            ]
        }
    },
    "Many More Already Completed": {
        "collaborators": [
        ],
        "collaboratorHints": [
        ],
        "collaboratorLinks": [
        ],
        "highlighted": false,
        "thumbnailURL": "",
        "relatedProjects": [],
        "relatedProjectHints": [],
        "Version 1": {
            "changes": "",
            "githubURL": "",
            "pictureURLs": [],
            "pictureDescriptions": [],
            "description": "Soon to be added, lots of projects have already been completed and have had hundreds of hours sunk into them. It is just a matter of writing the descriptions, formatting the JSON, and loading them into the website's database.",
            "components": [],
            "projectStart": "2020-03-15",
            "projectEnd": "Now",
            "primaryLanguages": [
                "C++",
                "GLSL",
                "Python",
                "MySQL",
                "Java",
                "JavaScript",
                "HTML",
                "CSS",
                "Swift",
                "More..."
            ],
            "frameworks": [],
            "frameworkHints": [],
            "tools": [],
            "toolHints": []
        }
    }
}